schema {
    query: Query
    mutation: MutationRoot
}

# A filter input type for boolean field values.
input BooleanFilter {
    # Filter by equal to.
    eq: Boolean

    # Filter by not equal to.
    notEq: Boolean
}

# The cursor used in paginated queries.
scalar Cursor

# The id of a p2panda document.
scalar DocumentId

# A filter input type for document id field on meta object.
input DocumentIdFilter {
    # Filter by values in set.
    in: [DocumentId!]

    # Filter by values not in set.
    notIn: [DocumentId!]

    # Filter by equal to.
    eq: DocumentId

    # Filter by not equal to.
    notEq: DocumentId
}

# Meta fields of a document, contains id and authorship information.
type DocumentMeta {
    # The document id of this document.
    documentId: DocumentId!

    # The document view id of this document.
    viewId: DocumentViewId!

    # The public key of the author who first created this document.
    owner: PublicKey!
}

# The document view id of a p2panda document. Refers to a specific point in a documents history
# and can be used to deterministically reconstruct it's state at that time.
scalar DocumentViewId

# A filter input type for document view id field on meta object.
input DocumentViewIdFilter {
    # Filter by values in set.
    in: [DocumentViewId!]

    # Filter by values not in set.
    notIn: [DocumentViewId!]

    # Filter by equal to.
    eq: DocumentViewId

    # Filter by not equal to.
    notEq: DocumentViewId
}

# Signed bamboo entry, encoded as a hexadecimal string.
scalar EncodedEntry

# Entry payload and p2panda operation, CBOR bytes encoded as a hexadecimal string.
scalar EncodedOperation

# Hash of a signed bamboo entry.
scalar EntryHash

# A filter input type for integer field values.
input IntegerFilter {
    # Filter by values in set.
    in: [Int!]

    # Filter by values not in set.
    notIn: [Int!]

    # Filter by equal to.
    eq: Int

    # Filter by not equal to.
    notEq: Int

    # Filter by greater than or equal to.
    gte: Int

    # Filter by greater than.
    gt: Int

    # Filter by less than or equal to.
    lte: Int

    # Filter by less than.
    lt: Int
}

# Log id of a bamboo entry.
scalar LogId

# Filter input object containing all meta fields a collection of documents can be filtered by.
#
# Is passed to the `meta` argument on a document collection query or list relation fields.
input MetaFilterInputObject {
    # Document id filter.
    documentId: DocumentIdFilter

    # Document view id filter.
    viewId: DocumentViewIdFilter

    # Owner filter.
    owner: OwnerFilter

    # Edited filter.
    edited: BooleanFilter

    # Deleted filter.
    deleted: BooleanFilter
}

# GraphQL mutation root.
type MutationRoot {
    # Publish an entry using parameters obtained through `nextArgs` query.
    #
    # Returns arguments for publishing the next entry in the same log.
    publish(entry: EncodedEntry!, operation: EncodedOperation!): NextArguments!
}

# Arguments required to sign and encode the next entry for a public_key.
type NextArguments {
    # Log id of the entry.
    logId: LogId!

    # Sequence number of the entry.
    seqNum: SeqNum!

    # Hash of the entry backlink.
    backlink: EntryHash

    # Hash of the entry skiplink.
    skiplink: EntryHash
}

# Possible ordering direction for collection queries.
enum OrderDirection {
    ASC
    DESC
}

# A filter input type for owner field on meta object.
input OwnerFilter {
    # Filter by values in set.
    in: [PublicKey!]

    # Filter by values not in set.
    notIn: [PublicKey!]

    # Filter by equal to.
    eq: PublicKey

    # Filter by not equal to.
    notEq: PublicKey
}

# A filter input type for pinned relation list field values.
input PinnedRelationListFilter {
    # Filter by values in set.
    in: [DocumentViewId!]

    # Filter by values not in set.
    notIn: [DocumentViewId!]
}

# Public key that signed the entry.
scalar PublicKey

# Query a paginated collection of `schema_field_definition` documents. The requested collection is filtered and ordered following parameters passed into the query via the available arguments.
type Query {
    # Query a record document by id or view id.
    record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099f(
        # Specify the id of the document to be retrieved
        id: DocumentId

        # Specify the view id of the document to be retrieved
        viewId: DocumentViewId
    ): record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099f

    # Get all record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099f documents with pagination, ordering and filtering.
    all_record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099f(
        # Filter the query based on field values
        filter: record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099fFilter

        # Filter the query based on meta field values
        meta: MetaFilterInputObject

        # Field by which items in the collection will be ordered
        orderBy: record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099fOrderBy

        # Direction which items in the collection will be ordered
        orderDirection: OrderDirection

        # Number of paginated items we want from this request
        first: Int = 25

        # The item we wish to start paginating from identified by a cursor
        after: Cursor
    ): record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099fCollection!

    # Query a schema_definition document by id or view id.
    schema_definition_v1(
        # Specify the id of the document to be retrieved
        id: DocumentId

        # Specify the view id of the document to be retrieved
        viewId: DocumentViewId
    ): schema_definition_v1

    # Get all schema_definition_v1 documents with pagination, ordering and filtering.
    all_schema_definition_v1(
        # Filter the query based on field values
        filter: schema_definition_v1Filter

        # Filter the query based on meta field values
        meta: MetaFilterInputObject

        # Field by which items in the collection will be ordered
        orderBy: schema_definition_v1OrderBy

        # Direction which items in the collection will be ordered
        orderDirection: OrderDirection

        # Number of paginated items we want from this request
        first: Int = 25

        # The item we wish to start paginating from identified by a cursor
        after: Cursor
    ): schema_definition_v1Collection!

    # Query a schema_field_definition document by id or view id.
    schema_field_definition_v1(
        # Specify the id of the document to be retrieved
        id: DocumentId

        # Specify the view id of the document to be retrieved
        viewId: DocumentViewId
    ): schema_field_definition_v1

    # Get all schema_field_definition_v1 documents with pagination, ordering and filtering.
    all_schema_field_definition_v1(
        # Filter the query based on field values
        filter: schema_field_definition_v1Filter

        # Filter the query based on meta field values
        meta: MetaFilterInputObject

        # Field by which items in the collection will be ordered
        orderBy: schema_field_definition_v1OrderBy

        # Direction which items in the collection will be ordered
        orderDirection: OrderDirection

        # Number of paginated items we want from this request
        first: Int = 25

        # The item we wish to start paginating from identified by a cursor
        after: Cursor
    ): schema_field_definition_v1Collection!

    # Return required arguments for publishing a entry to a node.
    nextArgs(
        # The public key of the author next args are being requested for.
        publicKey: PublicKey!

        # Optional field for specifying an existing document next args are being requested for.
        viewId: DocumentViewId
    ): NextArguments
}

# Sequence number of an entry.
scalar SeqNum

# A filter input type for string field values.
input StringFilter {
    # Filter by values in set.
    in: [String!]

    # Filter by values not in set.
    notIn: [String!]

    # Filter by equal to.
    eq: String

    # Filter by not equal to.
    notEq: String

    # Filter by greater than or equal to.
    gte: String

    # Filter by greater than.
    gt: String

    # Filter by less than or equal to.
    lte: String

    # Filter by less than.
    lt: String

    # Filter for items which contain given value.
    contains: String

    # Filter for items which don't contain given value.
    notContains: String
}

# Clipboard record documents
type record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099f {
    # Application fields of a `record` document.
    fields: record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099fFields

    # Meta fields of a `record` document.
    meta: DocumentMeta
}

# A single page response returned when querying a collection of `record` documents.
type record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099fCollection {
    # The total number of documents available in this paginated collection.
    totalCount: Int!

    # Cursor for the next page
    endCursor: String!

    # Boolean value denoting whether there is a next page available on this query.
    hasNextPage: Boolean!

    # Field containing the actual document fields.
    documents: [record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099fItem!]!
}

# The application fields of a `record` document.
type record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099fFields {
    # The `content` field of a record document.
    content: String

    # The `content_preview` field of a record document.
    content_preview: String

    # The `create_time` field of a record document.
    create_time: Int

    # The `data_type` field of a record document.
    data_type: String

    # The `is_deleted` field of a record document.
    is_deleted: Int

    # The `is_favorite` field of a record document.
    is_favorite: Int

    # The `latest_addr` field of a record document.
    latest_addr: String

    # The `md5` field of a record document.
    md5: String

    # The `tags` field of a record document.
    tags: String
}

input record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099fFilter {
    content: StringFilter
    content_preview: StringFilter
    create_time: IntegerFilter
    data_type: StringFilter
    is_deleted: IntegerFilter
    is_favorite: IntegerFilter
    latest_addr: StringFilter
    md5: StringFilter
    tags: StringFilter
}

# Clipboard record documents
type record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099fItem {
    # Application fields of a `record` document.
    fields: record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099fFields

    # Meta fields of a `record` document.
    meta: DocumentMeta

    # The pagination cursor for this `record` document.
    cursor: String
}

enum record_002017915c937c1c44d1d6a7bc6697b2760396843676cc418a02b481fb08009e099fOrderBy {
    DOCUMENT_ID
    DOCUMENT_VIEW_ID
    content
    content_preview
    create_time
    data_type
    is_deleted
    is_favorite
    latest_addr
    md5
    tags
}

# Publish data schemas for your application.
type schema_definition_v1 {
    # Application fields of a `schema_definition` document.
    fields: schema_definition_v1Fields

    # Meta fields of a `schema_definition` document.
    meta: DocumentMeta
}

# A single page response returned when querying a collection of `schema_definition` documents.
type schema_definition_v1Collection {
    # The total number of documents available in this paginated collection.
    totalCount: Int!

    # Cursor for the next page
    endCursor: String!

    # Boolean value denoting whether there is a next page available on this query.
    hasNextPage: Boolean!

    # Field containing the actual document fields.
    documents: [schema_definition_v1Item!]!
}

# The application fields of a `schema_definition` document.
type schema_definition_v1Fields {
    # The `description` field of a schema_definition document.
    description: String

    # Get all schema_field_definition_v1 documents with pagination, ordering and filtering.
    fields(
        # Filter the query based on field values
        filter: schema_field_definition_v1Filter

        # Filter the query based on meta field values
        meta: MetaFilterInputObject

        # Field by which items in the collection will be ordered
        orderBy: schema_field_definition_v1OrderBy

        # Direction which items in the collection will be ordered
        orderDirection: OrderDirection

        # Number of paginated items we want from this request
        first: Int = 25

        # The item we wish to start paginating from identified by a cursor
        after: Cursor
    ): schema_field_definition_v1Collection

    # The `name` field of a schema_definition document.
    name: String
}

input schema_definition_v1Filter {
    description: StringFilter
    fields: PinnedRelationListFilter
    name: StringFilter
}

# Publish data schemas for your application.
type schema_definition_v1Item {
    # Application fields of a `schema_definition` document.
    fields: schema_definition_v1Fields

    # Meta fields of a `schema_definition` document.
    meta: DocumentMeta

    # The pagination cursor for this `schema_definition` document.
    cursor: String
}

enum schema_definition_v1OrderBy {
    DOCUMENT_ID
    DOCUMENT_VIEW_ID
    description
    fields
    name
}

# Define fields for application data schemas.
type schema_field_definition_v1 {
    # Application fields of a `schema_field_definition` document.
    fields: schema_field_definition_v1Fields

    # Meta fields of a `schema_field_definition` document.
    meta: DocumentMeta
}

# A single page response returned when querying a collection of `schema_field_definition` documents.
type schema_field_definition_v1Collection {
    # The total number of documents available in this paginated collection.
    totalCount: Int!

    # Cursor for the next page
    endCursor: String!

    # Boolean value denoting whether there is a next page available on this query.
    hasNextPage: Boolean!

    # Field containing the actual document fields.
    documents: [schema_field_definition_v1Item!]!
}

# The application fields of a `schema_field_definition` document.
type schema_field_definition_v1Fields {
    # The `name` field of a schema_field_definition document.
    name: String

    # The `type` field of a schema_field_definition document.
    type: String
}

input schema_field_definition_v1Filter {
    name: StringFilter
    type: StringFilter
}

# Define fields for application data schemas.
type schema_field_definition_v1Item {
    # Application fields of a `schema_field_definition` document.
    fields: schema_field_definition_v1Fields

    # Meta fields of a `schema_field_definition` document.
    meta: DocumentMeta

    # The pagination cursor for this `schema_field_definition` document.
    cursor: String
}

enum schema_field_definition_v1OrderBy {
    DOCUMENT_ID
    DOCUMENT_VIEW_ID
    name
    type
}
